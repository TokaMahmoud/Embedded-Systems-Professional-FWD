
AVR_ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000612  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000686  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000686  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000686  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011a7  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d2  00000000  00000000  000019e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a59  00000000  00000000  000022b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00002d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000578  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000655  00000000  00000000  000034d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003b25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  74:	0c 94 07 03 	jmp	0x60e	; 0x60e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <App_init>:
uint8 state;
uint8 isNormalMode;

void App_init(void)
{
	LED_init(PORT_A, 0); //cars' Green LED
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 3c 01 	call	0x278	; 0x278 <LED_init>
	LED_init(PORT_A, 1); //cars' Yellow LED
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 3c 01 	call	0x278	; 0x278 <LED_init>
	LED_init(PORT_A, 2); //cars' Red LED
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 3c 01 	call	0x278	; 0x278 <LED_init>
	
	LED_init(PORT_B, 0); //pedestrian's Green LED
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 3c 01 	call	0x278	; 0x278 <LED_init>
	LED_init(PORT_B, 1); //pedestrian Yellow LED
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 3c 01 	call	0x278	; 0x278 <LED_init>
	LED_init(PORT_B, 2); //pedestrian Red LED
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 3c 01 	call	0x278	; 0x278 <LED_init>
	
	BUTTON_init(PORT_D, 2); //pedestrian button
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	0e 94 38 01 	call	0x270	; 0x270 <BUTTON_init>
	interrupt_init();
  b4:	0e 94 cc 02 	call	0x598	; 0x598 <interrupt_init>
  b8:	08 95       	ret

000000ba <normal_mode>:
}

void  normal_mode(void)
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
	isNormalMode = 1;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	//Cars' LEDs will be changed every five seconds starting from Green then yellow then red then yellow then Green.
	state = 1;
  c4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <state>
	LED_on(PORT_A, 0); //cars' Green LED
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	81 e4       	ldi	r24, 0x41	; 65
  cc:	0e 94 40 01 	call	0x280	; 0x280 <LED_on>
	delay_5sec_t2();
  d0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <delay_5sec_t2>
	LED_off(PORT_A, 0);
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	81 e4       	ldi	r24, 0x41	; 65
  d8:	0e 94 44 01 	call	0x288	; 0x288 <LED_off>
		
	//Yellow LED will blink for five seconds before moving to Green or Red LEDs.
	uint16 overflowCounter = 0;
	timer_init_t2();
  dc:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <timer_init_t2>
	LED_on(PORT_A, 0); //cars' Green LED
	delay_5sec_t2();
	LED_off(PORT_A, 0);
		
	//Yellow LED will blink for five seconds before moving to Green or Red LEDs.
	uint16 overflowCounter = 0;
  e0:	c0 e0       	ldi	r28, 0x00	; 0
  e2:	d0 e0       	ldi	r29, 0x00	; 0
	timer_init_t2();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
  e4:	0b c0       	rjmp	.+22     	; 0xfc <normal_mode+0x42>
	{
		while(READ_BIT(TIFR, 6) == 0)
		LED_toggle(PORT_A,1); //cars' Yellow LED
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	81 e4       	ldi	r24, 0x41	; 65
  ea:	0e 94 48 01 	call	0x290	; 0x290 <LED_toggle>
	//Yellow LED will blink for five seconds before moving to Green or Red LEDs.
	uint16 overflowCounter = 0;
	timer_init_t2();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
	{
		while(READ_BIT(TIFR, 6) == 0)
  ee:	08 b6       	in	r0, 0x38	; 56
  f0:	06 fe       	sbrs	r0, 6
  f2:	f9 cf       	rjmp	.-14     	; 0xe6 <normal_mode+0x2c>
		LED_toggle(PORT_A,1); //cars' Yellow LED
		//clear the flag
		SET_BIT(TIFR, 6);
  f4:	88 b7       	in	r24, 0x38	; 56
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	88 bf       	out	0x38, r24	; 56
		overflowCounter++;
  fa:	21 96       	adiw	r28, 0x01	; 1
	LED_off(PORT_A, 0);
		
	//Yellow LED will blink for five seconds before moving to Green or Red LEDs.
	uint16 overflowCounter = 0;
	timer_init_t2();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
  fc:	c4 31       	cpi	r28, 0x14	; 20
  fe:	d1 05       	cpc	r29, r1
 100:	b0 f3       	brcs	.-20     	; 0xee <normal_mode+0x34>
		LED_toggle(PORT_A,1); //cars' Yellow LED
		//clear the flag
		SET_BIT(TIFR, 6);
		overflowCounter++;
	}
	LED_off(PORT_A,1);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	81 e4       	ldi	r24, 0x41	; 65
 106:	0e 94 44 01 	call	0x288	; 0x288 <LED_off>
	//Stop timer
	TCCR2 = 0x00;
 10a:	15 bc       	out	0x25, r1	; 37
		
	state=0;
 10c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <state>
	LED_on(PORT_A, 2); //cars' Red LED
 110:	62 e0       	ldi	r22, 0x02	; 2
 112:	81 e4       	ldi	r24, 0x41	; 65
 114:	0e 94 40 01 	call	0x280	; 0x280 <LED_on>
	delay_5sec_t2();
 118:	0e 94 f5 02 	call	0x5ea	; 0x5ea <delay_5sec_t2>
	LED_off(PORT_A, 2);
 11c:	62 e0       	ldi	r22, 0x02	; 2
 11e:	81 e4       	ldi	r24, 0x41	; 65
 120:	0e 94 44 01 	call	0x288	; 0x288 <LED_off>
	
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <pedestrian_mode>:

void pedestrian_mode(void)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
	isNormalMode = 0;
 12e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	switch(state)
 132:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <state>
 136:	88 23       	and	r24, r24
 138:	19 f0       	breq	.+6      	; 0x140 <pedestrian_mode+0x16>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	61 f0       	breq	.+24     	; 0x156 <pedestrian_mode+0x2c>
 13e:	41 c0       	rjmp	.+130    	; 0x1c2 <pedestrian_mode+0x98>
	{
		//---------------------If pressed when the cars' Red LED is on,--------------
		case 0:
		//1. pedestrian's Green LED and the cars' Red LEDs will be on for five seconds
		LED_on(PORT_B, 0); //pedestrian's Green LED
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	82 e4       	ldi	r24, 0x42	; 66
 144:	0e 94 40 01 	call	0x280	; 0x280 <LED_on>
		LED_on(PORT_A, 2); //cars' Red LED
 148:	62 e0       	ldi	r22, 0x02	; 2
 14a:	81 e4       	ldi	r24, 0x41	; 65
 14c:	0e 94 40 01 	call	0x280	; 0x280 <LED_on>
		delay_5sec();
 150:	0e 94 de 02 	call	0x5bc	; 0x5bc <delay_5sec>
		
		break;
 154:	36 c0       	rjmp	.+108    	; 0x1c2 <pedestrian_mode+0x98>
		
		//---------------If pressed when the cars' Green LED is on or the cars' Yellow LED is blinking-----------------
		case 1:
		//1.the pedestrian Red LED will be on
		LED_on(PORT_B, 2); //pedestrian Red LED
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	82 e4       	ldi	r24, 0x42	; 66
 15a:	0e 94 40 01 	call	0x280	; 0x280 <LED_on>
		
		//2.both Yellow LEDs start to blink for five seconds
		uint16 overflowCounter = 0;
		timer_init();
 15e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <timer_init>
		case 1:
		//1.the pedestrian Red LED will be on
		LED_on(PORT_B, 2); //pedestrian Red LED
		
		//2.both Yellow LEDs start to blink for five seconds
		uint16 overflowCounter = 0;
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	d0 e0       	ldi	r29, 0x00	; 0
		timer_init();
		while(overflowCounter < NUMBUR_OF_OVERFLOWS)
 166:	0f c0       	rjmp	.+30     	; 0x186 <pedestrian_mode+0x5c>
		{
			while(READ_BIT(TIFR, 0) == 0)
			{
				LED_toggle(PORT_A,1); //cars' Yellow LED
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	81 e4       	ldi	r24, 0x41	; 65
 16c:	0e 94 48 01 	call	0x290	; 0x290 <LED_toggle>
				LED_toggle(PORT_B, 1); //pedestrian Yellow LED
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	82 e4       	ldi	r24, 0x42	; 66
 174:	0e 94 48 01 	call	0x290	; 0x290 <LED_toggle>
		//2.both Yellow LEDs start to blink for five seconds
		uint16 overflowCounter = 0;
		timer_init();
		while(overflowCounter < NUMBUR_OF_OVERFLOWS)
		{
			while(READ_BIT(TIFR, 0) == 0)
 178:	08 b6       	in	r0, 0x38	; 56
 17a:	00 fe       	sbrs	r0, 0
 17c:	f5 cf       	rjmp	.-22     	; 0x168 <pedestrian_mode+0x3e>
				LED_toggle(PORT_A,1); //cars' Yellow LED
				LED_toggle(PORT_B, 1); //pedestrian Yellow LED
			}
			
			//clear the flag
			SET_BIT(TIFR, 0);
 17e:	88 b7       	in	r24, 0x38	; 56
 180:	81 60       	ori	r24, 0x01	; 1
 182:	88 bf       	out	0x38, r24	; 56
			overflowCounter++;
 184:	21 96       	adiw	r28, 0x01	; 1
		LED_on(PORT_B, 2); //pedestrian Red LED
		
		//2.both Yellow LEDs start to blink for five seconds
		uint16 overflowCounter = 0;
		timer_init();
		while(overflowCounter < NUMBUR_OF_OVERFLOWS)
 186:	c4 31       	cpi	r28, 0x14	; 20
 188:	d1 05       	cpc	r29, r1
 18a:	b0 f3       	brcs	.-20     	; 0x178 <pedestrian_mode+0x4e>
			
			//clear the flag
			SET_BIT(TIFR, 0);
			overflowCounter++;
		}
		LED_off(PORT_A,1); //cars' Yellow LED
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	81 e4       	ldi	r24, 0x41	; 65
 190:	0e 94 44 01 	call	0x288	; 0x288 <LED_off>
		LED_off(PORT_B, 1); //pedestrian Yellow LED
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	82 e4       	ldi	r24, 0x42	; 66
 198:	0e 94 44 01 	call	0x288	; 0x288 <LED_off>
		//Stop timer
		TCCR0 = 0x00;
 19c:	13 be       	out	0x33, r1	; 51
		
		LED_off(PORT_B, 2); //pedestrian Red LED
 19e:	62 e0       	ldi	r22, 0x02	; 2
 1a0:	82 e4       	ldi	r24, 0x42	; 66
 1a2:	0e 94 44 01 	call	0x288	; 0x288 <LED_off>
		LED_off(PORT_A, 0); //cars' Green LED
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	81 e4       	ldi	r24, 0x41	; 65
 1aa:	0e 94 44 01 	call	0x288	; 0x288 <LED_off>
		
		//3. the cars' Red LED and pedestrian Green LEDs are on for five seconds
		LED_on(PORT_A, 2); //cars' Red LED
 1ae:	62 e0       	ldi	r22, 0x02	; 2
 1b0:	81 e4       	ldi	r24, 0x41	; 65
 1b2:	0e 94 40 01 	call	0x280	; 0x280 <LED_on>
		LED_on(PORT_B, 0); //pedestrian's Green LED
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	82 e4       	ldi	r24, 0x42	; 66
 1ba:	0e 94 40 01 	call	0x280	; 0x280 <LED_on>
		delay_5sec();
 1be:	0e 94 de 02 	call	0x5bc	; 0x5bc <delay_5sec>
	
	
	//------------------------ At the end of the two states ------------------------------------------
	
	//1. the cars' Red LED will be off
	LED_off(PORT_A, 2); //cars' Red LED
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	81 e4       	ldi	r24, 0x41	; 65
 1c6:	0e 94 44 01 	call	0x288	; 0x288 <LED_off>
	
	//2.both Yellow LEDs start blinking for 5 seconds and the pedestrian's Green LED is still on.
	uint16 overflowCounter = 0;
	timer_init();
 1ca:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <timer_init>
	
	//1. the cars' Red LED will be off
	LED_off(PORT_A, 2); //cars' Red LED
	
	//2.both Yellow LEDs start blinking for 5 seconds and the pedestrian's Green LED is still on.
	uint16 overflowCounter = 0;
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
 1d0:	d0 e0       	ldi	r29, 0x00	; 0
	timer_init();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
 1d2:	0f c0       	rjmp	.+30     	; 0x1f2 <pedestrian_mode+0xc8>
	{
		while(READ_BIT(TIFR, 0) == 0)
		{
			LED_toggle(PORT_A,1); //cars' Yellow LED
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	81 e4       	ldi	r24, 0x41	; 65
 1d8:	0e 94 48 01 	call	0x290	; 0x290 <LED_toggle>
			LED_toggle(PORT_B, 1); //pedestrian Yellow LED
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	82 e4       	ldi	r24, 0x42	; 66
 1e0:	0e 94 48 01 	call	0x290	; 0x290 <LED_toggle>
	//2.both Yellow LEDs start blinking for 5 seconds and the pedestrian's Green LED is still on.
	uint16 overflowCounter = 0;
	timer_init();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
	{
		while(READ_BIT(TIFR, 0) == 0)
 1e4:	08 b6       	in	r0, 0x38	; 56
 1e6:	00 fe       	sbrs	r0, 0
 1e8:	f5 cf       	rjmp	.-22     	; 0x1d4 <pedestrian_mode+0xaa>
			LED_toggle(PORT_A,1); //cars' Yellow LED
			LED_toggle(PORT_B, 1); //pedestrian Yellow LED
		}
		
		//clear the flag
		SET_BIT(TIFR, 0);
 1ea:	88 b7       	in	r24, 0x38	; 56
 1ec:	81 60       	ori	r24, 0x01	; 1
 1ee:	88 bf       	out	0x38, r24	; 56
		overflowCounter++;
 1f0:	21 96       	adiw	r28, 0x01	; 1
	LED_off(PORT_A, 2); //cars' Red LED
	
	//2.both Yellow LEDs start blinking for 5 seconds and the pedestrian's Green LED is still on.
	uint16 overflowCounter = 0;
	timer_init();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
 1f2:	c4 31       	cpi	r28, 0x14	; 20
 1f4:	d1 05       	cpc	r29, r1
 1f6:	b0 f3       	brcs	.-20     	; 0x1e4 <pedestrian_mode+0xba>
		
		//clear the flag
		SET_BIT(TIFR, 0);
		overflowCounter++;
	}
	LED_off(PORT_A,1); //cars' Yellow LED
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	81 e4       	ldi	r24, 0x41	; 65
 1fc:	0e 94 44 01 	call	0x288	; 0x288 <LED_off>
	LED_off(PORT_B, 1); //pedestrian Yellow LED
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	82 e4       	ldi	r24, 0x42	; 66
 204:	0e 94 44 01 	call	0x288	; 0x288 <LED_off>
	//Stop timer
	TCCR0 = 0x00;
 208:	13 be       	out	0x33, r1	; 51
	
	//3.After the five seconds the pedestrian Green LED will be off
	LED_off(PORT_B, 0); //pedestrian's Green LED
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	82 e4       	ldi	r24, 0x42	; 66
 20e:	0e 94 44 01 	call	0x288	; 0x288 <LED_off>
	
	//4.both the pedestrian Red LED and the cars' Green LED will be on.
	LED_on(PORT_B, 2); //pedestrian Red LED
 212:	62 e0       	ldi	r22, 0x02	; 2
 214:	82 e4       	ldi	r24, 0x42	; 66
 216:	0e 94 40 01 	call	0x280	; 0x280 <LED_on>
	LED_on(PORT_A, 0); //cars' Green LED
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	81 e4       	ldi	r24, 0x41	; 65
 21e:	0e 94 40 01 	call	0x280	; 0x280 <LED_on>
	
	//5. Traffic lights signals are going to the normal mode again.
	//normal_mode();
}
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <__vector_1>:

ISR(EXT_INT0)
{
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	2f 93       	push	r18
 234:	3f 93       	push	r19
 236:	4f 93       	push	r20
 238:	5f 93       	push	r21
 23a:	6f 93       	push	r22
 23c:	7f 93       	push	r23
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	af 93       	push	r26
 244:	bf 93       	push	r27
 246:	ef 93       	push	r30
 248:	ff 93       	push	r31

	}
	else{
		//do nothing
	}*/
	pedestrian_mode();
 24a:	0e 94 95 00 	call	0x12a	; 0x12a <pedestrian_mode>
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	bf 91       	pop	r27
 254:	af 91       	pop	r26
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	7f 91       	pop	r23
 25c:	6f 91       	pop	r22
 25e:	5f 91       	pop	r21
 260:	4f 91       	pop	r20
 262:	3f 91       	pop	r19
 264:	2f 91       	pop	r18
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <BUTTON_init>:
//global variables

//functions definitions
void BUTTON_init(uint8 buttonPort, uint8 buttonPin)
{
	DIO_init(buttonPort, buttonPin, IN);
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_init>
 276:	08 95       	ret

00000278 <LED_init>:
//global variables

//functions definitions
void LED_init(uint8 ledPort, uint8 ledPin)
{
	DIO_init(ledPort, ledPin, OUT);
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_init>
 27e:	08 95       	ret

00000280 <LED_on>:
}

void LED_on(uint8 ledPort, uint8 ledPin)
{
	DIO_write(ledPort,ledPin, HIGH);
 280:	41 e0       	ldi	r20, 0x01	; 1
 282:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_write>
 286:	08 95       	ret

00000288 <LED_off>:
}

void LED_off(uint8 ledPort, uint8 ledPin)
{
	DIO_write(ledPort,ledPin, LOW);
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_write>
 28e:	08 95       	ret

00000290 <LED_toggle>:
}

void LED_toggle(uint8 ledPort, uint8 ledPin)
{
	DIO_toggle(ledPort,ledPin);
 290:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_toggle>
 294:	08 95       	ret

00000296 <main>:

#include "Application/App.h"

int main(void)
{
	App_init();
 296:	0e 94 3e 00 	call	0x7c	; 0x7c <App_init>
	
	while (1)
	{
		normal_mode();
 29a:	0e 94 5d 00 	call	0xba	; 0xba <normal_mode>
 29e:	fd cf       	rjmp	.-6      	; 0x29a <main+0x4>

000002a0 <DIO_init>:
//global variables

//functions definitions
void DIO_init(uint8 portNumber, uint8 pinNumber, uint8 direction)
{
	switch(portNumber)
 2a0:	82 34       	cpi	r24, 0x42	; 66
 2a2:	31 f1       	breq	.+76     	; 0x2f0 <DIO_init+0x50>
 2a4:	18 f4       	brcc	.+6      	; 0x2ac <DIO_init+0xc>
 2a6:	81 34       	cpi	r24, 0x41	; 65
 2a8:	39 f0       	breq	.+14     	; 0x2b8 <DIO_init+0x18>
 2aa:	08 95       	ret
 2ac:	83 34       	cpi	r24, 0x43	; 67
 2ae:	e1 f1       	breq	.+120    	; 0x328 <DIO_init+0x88>
 2b0:	84 34       	cpi	r24, 0x44	; 68
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <DIO_init+0x16>
 2b4:	54 c0       	rjmp	.+168    	; 0x35e <DIO_init+0xbe>
 2b6:	08 95       	ret
	{
		case PORT_A:
			if (direction == IN)
 2b8:	41 11       	cpse	r20, r1
 2ba:	0c c0       	rjmp	.+24     	; 0x2d4 <DIO_init+0x34>
			{
				CLR_BIT(DDRA, pinNumber);
 2bc:	2a b3       	in	r18, 0x1a	; 26
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_init+0x28>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_init+0x24>
 2cc:	80 95       	com	r24
 2ce:	82 23       	and	r24, r18
 2d0:	8a bb       	out	0x1a, r24	; 26
 2d2:	08 95       	ret
			}
			else if (direction == OUT)
 2d4:	41 30       	cpi	r20, 0x01	; 1
 2d6:	09 f0       	breq	.+2      	; 0x2da <DIO_init+0x3a>
 2d8:	5c c0       	rjmp	.+184    	; 0x392 <DIO_init+0xf2>
			{
				SET_BIT(DDRA, pinNumber);
 2da:	2a b3       	in	r18, 0x1a	; 26
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_init+0x46>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_init+0x42>
 2ea:	82 2b       	or	r24, r18
 2ec:	8a bb       	out	0x1a, r24	; 26
 2ee:	08 95       	ret
				//Error handling
			}
		break;
		
		case PORT_B:
			if (direction == IN)
 2f0:	41 11       	cpse	r20, r1
 2f2:	0c c0       	rjmp	.+24     	; 0x30c <DIO_init+0x6c>
			{
				CLR_BIT(DDRB, pinNumber);
 2f4:	27 b3       	in	r18, 0x17	; 23
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_init+0x60>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_init+0x5c>
 304:	80 95       	com	r24
 306:	82 23       	and	r24, r18
 308:	87 bb       	out	0x17, r24	; 23
 30a:	08 95       	ret
			}
			else if (direction == OUT)
 30c:	41 30       	cpi	r20, 0x01	; 1
 30e:	09 f0       	breq	.+2      	; 0x312 <DIO_init+0x72>
 310:	40 c0       	rjmp	.+128    	; 0x392 <DIO_init+0xf2>
			{
				SET_BIT(DDRB, pinNumber);
 312:	27 b3       	in	r18, 0x17	; 23
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_init+0x7e>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_init+0x7a>
 322:	82 2b       	or	r24, r18
 324:	87 bb       	out	0x17, r24	; 23
 326:	08 95       	ret
				//Error handling
			}
		break;
		
		case PORT_C:
		if (direction == IN)
 328:	41 11       	cpse	r20, r1
 32a:	0c c0       	rjmp	.+24     	; 0x344 <DIO_init+0xa4>
		{
			CLR_BIT(DDRC, pinNumber);
 32c:	24 b3       	in	r18, 0x14	; 20
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_init+0x98>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_init+0x94>
 33c:	80 95       	com	r24
 33e:	82 23       	and	r24, r18
 340:	84 bb       	out	0x14, r24	; 20
 342:	08 95       	ret
		}
		else if (direction == OUT)
 344:	41 30       	cpi	r20, 0x01	; 1
 346:	29 f5       	brne	.+74     	; 0x392 <DIO_init+0xf2>
		{
			SET_BIT(DDRC, pinNumber);
 348:	24 b3       	in	r18, 0x14	; 20
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_init+0xb4>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_init+0xb0>
 358:	82 2b       	or	r24, r18
 35a:	84 bb       	out	0x14, r24	; 20
 35c:	08 95       	ret
			//Error handling
		}
		break;
		
		case PORT_D:
		if (direction == IN)
 35e:	41 11       	cpse	r20, r1
 360:	0c c0       	rjmp	.+24     	; 0x37a <DIO_init+0xda>
		{
			CLR_BIT(DDRD, pinNumber);
 362:	21 b3       	in	r18, 0x11	; 17
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_init+0xce>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_init+0xca>
 372:	80 95       	com	r24
 374:	82 23       	and	r24, r18
 376:	81 bb       	out	0x11, r24	; 17
 378:	08 95       	ret
		}
		else if (direction == OUT)
 37a:	41 30       	cpi	r20, 0x01	; 1
 37c:	51 f4       	brne	.+20     	; 0x392 <DIO_init+0xf2>
		{
			SET_BIT(DDRD, pinNumber);
 37e:	21 b3       	in	r18, 0x11	; 17
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_init+0xea>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	6a 95       	dec	r22
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_init+0xe6>
 38e:	82 2b       	or	r24, r18
 390:	81 bb       	out	0x11, r24	; 17
 392:	08 95       	ret

00000394 <DIO_write>:
	}
}

void DIO_write(uint8 portNumber, uint8 pinNumber, uint8 value)
{
	switch(portNumber)
 394:	82 34       	cpi	r24, 0x42	; 66
 396:	31 f1       	breq	.+76     	; 0x3e4 <DIO_write+0x50>
 398:	18 f4       	brcc	.+6      	; 0x3a0 <DIO_write+0xc>
 39a:	81 34       	cpi	r24, 0x41	; 65
 39c:	39 f0       	breq	.+14     	; 0x3ac <DIO_write+0x18>
 39e:	08 95       	ret
 3a0:	83 34       	cpi	r24, 0x43	; 67
 3a2:	e1 f1       	breq	.+120    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3a4:	84 34       	cpi	r24, 0x44	; 68
 3a6:	09 f4       	brne	.+2      	; 0x3aa <DIO_write+0x16>
 3a8:	54 c0       	rjmp	.+168    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 3aa:	08 95       	ret
	{
		case PORT_A:
		if (value == LOW)
 3ac:	41 11       	cpse	r20, r1
 3ae:	0c c0       	rjmp	.+24     	; 0x3c8 <DIO_write+0x34>
		{
			CLR_BIT(PORTA, pinNumber);
 3b0:	2b b3       	in	r18, 0x1b	; 27
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_write+0x28>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_write+0x24>
 3c0:	80 95       	com	r24
 3c2:	82 23       	and	r24, r18
 3c4:	8b bb       	out	0x1b, r24	; 27
 3c6:	08 95       	ret
		}
		else if (value == HIGH)
 3c8:	41 30       	cpi	r20, 0x01	; 1
 3ca:	09 f0       	breq	.+2      	; 0x3ce <DIO_write+0x3a>
 3cc:	5c c0       	rjmp	.+184    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		{
			SET_BIT(PORTA, pinNumber);
 3ce:	2b b3       	in	r18, 0x1b	; 27
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_write+0x46>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_write+0x42>
 3de:	82 2b       	or	r24, r18
 3e0:	8b bb       	out	0x1b, r24	; 27
 3e2:	08 95       	ret
			//Error handling
		}
		break;
		
		case PORT_B:
		if (value == LOW)
 3e4:	41 11       	cpse	r20, r1
 3e6:	0c c0       	rjmp	.+24     	; 0x400 <__EEPROM_REGION_LENGTH__>
		{
			CLR_BIT(PORTB, pinNumber);
 3e8:	28 b3       	in	r18, 0x18	; 24
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_write+0x60>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_write+0x5c>
 3f8:	80 95       	com	r24
 3fa:	82 23       	and	r24, r18
 3fc:	88 bb       	out	0x18, r24	; 24
 3fe:	08 95       	ret
		}
		else if (value == HIGH)
 400:	41 30       	cpi	r20, 0x01	; 1
 402:	09 f0       	breq	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 404:	40 c0       	rjmp	.+128    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		{
			SET_BIT(PORTB, pinNumber);
 406:	28 b3       	in	r18, 0x18	; 24
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	82 2b       	or	r24, r18
 418:	88 bb       	out	0x18, r24	; 24
 41a:	08 95       	ret
			//Error handling
		}
		break;
		
		case PORT_C:
		if (value == LOW)
 41c:	41 11       	cpse	r20, r1
 41e:	0c c0       	rjmp	.+24     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
		{
			CLR_BIT(PORTC, pinNumber);
 420:	25 b3       	in	r18, 0x15	; 21
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	6a 95       	dec	r22
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	80 95       	com	r24
 432:	82 23       	and	r24, r18
 434:	85 bb       	out	0x15, r24	; 21
 436:	08 95       	ret
		}
		else if (value == HIGH)
 438:	41 30       	cpi	r20, 0x01	; 1
 43a:	29 f5       	brne	.+74     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		{
			SET_BIT(PORTC, pinNumber);
 43c:	25 b3       	in	r18, 0x15	; 21
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	82 2b       	or	r24, r18
 44e:	85 bb       	out	0x15, r24	; 21
 450:	08 95       	ret
			//Error handling
		}
		break;
		
		case PORT_D:
		if (value == LOW)
 452:	41 11       	cpse	r20, r1
 454:	0c c0       	rjmp	.+24     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
		{
			CLR_BIT(PORTD, pinNumber);
 456:	22 b3       	in	r18, 0x12	; 18
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	6a 95       	dec	r22
 464:	e2 f7       	brpl	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 466:	80 95       	com	r24
 468:	82 23       	and	r24, r18
 46a:	82 bb       	out	0x12, r24	; 18
 46c:	08 95       	ret
		}
		else if (value == HIGH)
 46e:	41 30       	cpi	r20, 0x01	; 1
 470:	51 f4       	brne	.+20     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		{
			SET_BIT(PORTD, pinNumber);
 472:	22 b3       	in	r18, 0x12	; 18
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	02 c0       	rjmp	.+4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	6a 95       	dec	r22
 480:	e2 f7       	brpl	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 482:	82 2b       	or	r24, r18
 484:	82 bb       	out	0x12, r24	; 18
 486:	08 95       	ret

00000488 <DIO_read>:
	}
}

void DIO_read(uint8 portNumber, uint8 pinNumber, uint8 *value)
{
	switch(portNumber)
 488:	82 34       	cpi	r24, 0x42	; 66
 48a:	01 f1       	breq	.+64     	; 0x4cc <DIO_read+0x44>
 48c:	18 f4       	brcc	.+6      	; 0x494 <DIO_read+0xc>
 48e:	81 34       	cpi	r24, 0x41	; 65
 490:	39 f0       	breq	.+14     	; 0x4a0 <DIO_read+0x18>
 492:	08 95       	ret
 494:	83 34       	cpi	r24, 0x43	; 67
 496:	81 f1       	breq	.+96     	; 0x4f8 <DIO_read+0x70>
 498:	84 34       	cpi	r24, 0x44	; 68
 49a:	09 f4       	brne	.+2      	; 0x49e <DIO_read+0x16>
 49c:	43 c0       	rjmp	.+134    	; 0x524 <DIO_read+0x9c>
 49e:	08 95       	ret
	{
		case PORT_A:
		*value = READ_BIT(PINA, pinNumber);
 4a0:	79 b3       	in	r23, 0x19	; 25
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	9c 01       	movw	r18, r24
 4a8:	06 2e       	mov	r0, r22
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_read+0x28>
 4ac:	22 0f       	add	r18, r18
 4ae:	33 1f       	adc	r19, r19
 4b0:	0a 94       	dec	r0
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_read+0x24>
 4b4:	87 2f       	mov	r24, r23
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	82 23       	and	r24, r18
 4ba:	93 23       	and	r25, r19
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_read+0x3a>
 4be:	95 95       	asr	r25
 4c0:	87 95       	ror	r24
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_read+0x36>
 4c6:	fa 01       	movw	r30, r20
 4c8:	80 83       	st	Z, r24
		break;
 4ca:	08 95       	ret
		
		case PORT_B:
		*value = READ_BIT(PINB, pinNumber);
 4cc:	76 b3       	in	r23, 0x16	; 22
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	9c 01       	movw	r18, r24
 4d4:	06 2e       	mov	r0, r22
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_read+0x54>
 4d8:	22 0f       	add	r18, r18
 4da:	33 1f       	adc	r19, r19
 4dc:	0a 94       	dec	r0
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_read+0x50>
 4e0:	87 2f       	mov	r24, r23
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	82 23       	and	r24, r18
 4e6:	93 23       	and	r25, r19
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_read+0x66>
 4ea:	95 95       	asr	r25
 4ec:	87 95       	ror	r24
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_read+0x62>
 4f2:	fa 01       	movw	r30, r20
 4f4:	80 83       	st	Z, r24
		break;
 4f6:	08 95       	ret
		
		case PORT_C:
		*value = READ_BIT(PINC, pinNumber);
 4f8:	73 b3       	in	r23, 0x13	; 19
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	9c 01       	movw	r18, r24
 500:	06 2e       	mov	r0, r22
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_read+0x80>
 504:	22 0f       	add	r18, r18
 506:	33 1f       	adc	r19, r19
 508:	0a 94       	dec	r0
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_read+0x7c>
 50c:	87 2f       	mov	r24, r23
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	82 23       	and	r24, r18
 512:	93 23       	and	r25, r19
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_read+0x92>
 516:	95 95       	asr	r25
 518:	87 95       	ror	r24
 51a:	6a 95       	dec	r22
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_read+0x8e>
 51e:	fa 01       	movw	r30, r20
 520:	80 83       	st	Z, r24
		break;
 522:	08 95       	ret
		
		case PORT_D:
		*value = READ_BIT(PIND, pinNumber);
 524:	70 b3       	in	r23, 0x10	; 16
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	9c 01       	movw	r18, r24
 52c:	06 2e       	mov	r0, r22
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_read+0xac>
 530:	22 0f       	add	r18, r18
 532:	33 1f       	adc	r19, r19
 534:	0a 94       	dec	r0
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_read+0xa8>
 538:	87 2f       	mov	r24, r23
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	82 23       	and	r24, r18
 53e:	93 23       	and	r25, r19
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_read+0xbe>
 542:	95 95       	asr	r25
 544:	87 95       	ror	r24
 546:	6a 95       	dec	r22
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_read+0xba>
 54a:	fa 01       	movw	r30, r20
 54c:	80 83       	st	Z, r24
 54e:	08 95       	ret

00000550 <DIO_toggle>:
		break;
	}
}

void DIO_toggle(uint8 portNumber, uint8 pinNumber)
{
 550:	0f 93       	push	r16
 552:	1f 93       	push	r17
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
 558:	1f 92       	push	r1
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
 55e:	18 2f       	mov	r17, r24
 560:	06 2f       	mov	r16, r22
	uint8 value;
	
	DIO_read(portNumber, pinNumber, &value);
 562:	ae 01       	movw	r20, r28
 564:	4f 5f       	subi	r20, 0xFF	; 255
 566:	5f 4f       	sbci	r21, 0xFF	; 255
 568:	0e 94 44 02 	call	0x488	; 0x488 <DIO_read>
	if (value == LOW)
 56c:	89 81       	ldd	r24, Y+1	; 0x01
 56e:	81 11       	cpse	r24, r1
 570:	06 c0       	rjmp	.+12     	; 0x57e <DIO_toggle+0x2e>
	{
		DIO_write(portNumber, pinNumber, HIGH);
 572:	41 e0       	ldi	r20, 0x01	; 1
 574:	60 2f       	mov	r22, r16
 576:	81 2f       	mov	r24, r17
 578:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_write>
 57c:	07 c0       	rjmp	.+14     	; 0x58c <DIO_toggle+0x3c>
	}
	else if (value == HIGH)
 57e:	81 30       	cpi	r24, 0x01	; 1
 580:	29 f4       	brne	.+10     	; 0x58c <DIO_toggle+0x3c>
	{
		DIO_write(portNumber, pinNumber, LOW);
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	60 2f       	mov	r22, r16
 586:	81 2f       	mov	r24, r17
 588:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_write>
	}
	else
	{
		//Error handling
	}
}
 58c:	0f 90       	pop	r0
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	1f 91       	pop	r17
 594:	0f 91       	pop	r16
 596:	08 95       	ret

00000598 <interrupt_init>:
#include "Interrupt.h"

void interrupt_init(void)
{
	//Enable global interrupt
	SET_BIT(SREG, 7);
 598:	8f b7       	in	r24, 0x3f	; 63
 59a:	80 68       	ori	r24, 0x80	; 128
 59c:	8f bf       	out	0x3f, r24	; 63
	
	//Choose the external interrupt sense
	SET_BIT(MCUCR,0);
 59e:	85 b7       	in	r24, 0x35	; 53
 5a0:	81 60       	ori	r24, 0x01	; 1
 5a2:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,1);	//The rising edge of INT0 generates an interrupt request
 5a4:	85 b7       	in	r24, 0x35	; 53
 5a6:	82 60       	ori	r24, 0x02	; 2
 5a8:	85 bf       	out	0x35, r24	; 53
	
	//Enable INT0
	SET_BIT(GICR, 6);
 5aa:	8b b7       	in	r24, 0x3b	; 59
 5ac:	80 64       	ori	r24, 0x40	; 64
 5ae:	8b bf       	out	0x3b, r24	; 59
 5b0:	08 95       	ret

000005b2 <timer_init>:
#include "timer.h"

void timer_init(void)
{
	//Timer initial value
	TCNT0 = 12;
 5b2:	8c e0       	ldi	r24, 0x0C	; 12
 5b4:	82 bf       	out	0x32, r24	; 50
	//Timer mode
	TCCR0 = 0x05; //Normal mode & clk/1024 (From prescaler)
 5b6:	85 e0       	ldi	r24, 0x05	; 5
 5b8:	83 bf       	out	0x33, r24	; 51
 5ba:	08 95       	ret

000005bc <delay_5sec>:

void delay_5sec(void)
{
	uint16 overflowCounter = 0;
	
	timer_init();
 5bc:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <timer_init>
	TCCR0 = 0x05; //Normal mode & clk/1024 (From prescaler)
}

void delay_5sec(void)
{
	uint16 overflowCounter = 0;
 5c0:	20 e0       	ldi	r18, 0x00	; 0
 5c2:	30 e0       	ldi	r19, 0x00	; 0
	
	timer_init();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
 5c4:	08 c0       	rjmp	.+16     	; 0x5d6 <delay_5sec+0x1a>
	{
		while(READ_BIT(TIFR, 0) == 0);
 5c6:	08 b6       	in	r0, 0x38	; 56
 5c8:	00 fe       	sbrs	r0, 0
 5ca:	fd cf       	rjmp	.-6      	; 0x5c6 <delay_5sec+0xa>
		
		//clear the flag
		SET_BIT(TIFR, 0);
 5cc:	88 b7       	in	r24, 0x38	; 56
 5ce:	81 60       	ori	r24, 0x01	; 1
 5d0:	88 bf       	out	0x38, r24	; 56
		overflowCounter++;
 5d2:	2f 5f       	subi	r18, 0xFF	; 255
 5d4:	3f 4f       	sbci	r19, 0xFF	; 255
void delay_5sec(void)
{
	uint16 overflowCounter = 0;
	
	timer_init();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
 5d6:	24 31       	cpi	r18, 0x14	; 20
 5d8:	31 05       	cpc	r19, r1
 5da:	a8 f3       	brcs	.-22     	; 0x5c6 <delay_5sec+0xa>
		SET_BIT(TIFR, 0);
		overflowCounter++;
	}
	
	//Stop timer
	TCCR0 = 0x00;
 5dc:	13 be       	out	0x33, r1	; 51
 5de:	08 95       	ret

000005e0 <timer_init_t2>:
}

void timer_init_t2(void)
{
	//Timer initial value
	TCNT2 = 12;
 5e0:	8c e0       	ldi	r24, 0x0C	; 12
 5e2:	84 bd       	out	0x24, r24	; 36
	//Timer mode
	TCCR2 = 0x05; //Normal mode & clk/1024 (From prescaler)
 5e4:	85 e0       	ldi	r24, 0x05	; 5
 5e6:	85 bd       	out	0x25, r24	; 37
 5e8:	08 95       	ret

000005ea <delay_5sec_t2>:

void delay_5sec_t2(void)
{
	uint16 overflowCounter = 0;
	
	timer_init_t2();
 5ea:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <timer_init_t2>
	TCCR2 = 0x05; //Normal mode & clk/1024 (From prescaler)
}

void delay_5sec_t2(void)
{
	uint16 overflowCounter = 0;
 5ee:	20 e0       	ldi	r18, 0x00	; 0
 5f0:	30 e0       	ldi	r19, 0x00	; 0
	
	timer_init_t2();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
 5f2:	08 c0       	rjmp	.+16     	; 0x604 <delay_5sec_t2+0x1a>
	{
		while(READ_BIT(TIFR, 6) == 0);
 5f4:	08 b6       	in	r0, 0x38	; 56
 5f6:	06 fe       	sbrs	r0, 6
 5f8:	fd cf       	rjmp	.-6      	; 0x5f4 <delay_5sec_t2+0xa>
		
		//clear the flag
		SET_BIT(TIFR, 6);
 5fa:	88 b7       	in	r24, 0x38	; 56
 5fc:	80 64       	ori	r24, 0x40	; 64
 5fe:	88 bf       	out	0x38, r24	; 56
		overflowCounter++;
 600:	2f 5f       	subi	r18, 0xFF	; 255
 602:	3f 4f       	sbci	r19, 0xFF	; 255
void delay_5sec_t2(void)
{
	uint16 overflowCounter = 0;
	
	timer_init_t2();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
 604:	24 31       	cpi	r18, 0x14	; 20
 606:	31 05       	cpc	r19, r1
 608:	a8 f3       	brcs	.-22     	; 0x5f4 <delay_5sec_t2+0xa>
		SET_BIT(TIFR, 6);
		overflowCounter++;
	}
	
	//Stop timer
	TCCR2 = 0x00;
 60a:	15 bc       	out	0x25, r1	; 37
 60c:	08 95       	ret

0000060e <_exit>:
 60e:	f8 94       	cli

00000610 <__stop_program>:
 610:	ff cf       	rjmp	.-2      	; 0x610 <__stop_program>
