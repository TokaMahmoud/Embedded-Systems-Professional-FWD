
AVR_ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000636  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000006aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001202  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d2  00000000  00000000  00001a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a71  00000000  00000000  00002334  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00002da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056b  00000000  00000000  00002ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000655  00000000  00000000  0000355b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003bb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5d 01 	call	0x2ba	; 0x2ba <main>
  74:	0c 94 19 03 	jmp	0x632	; 0x632 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <App_init>:

uint8 state;

void App_init(void)
{
	LED_init(PORT_A, 0); //cars' Green LED
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 4e 01 	call	0x29c	; 0x29c <LED_init>
	LED_init(PORT_A, 1); //cars' Yellow LED
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 4e 01 	call	0x29c	; 0x29c <LED_init>
	LED_init(PORT_A, 2); //cars' Red LED
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 4e 01 	call	0x29c	; 0x29c <LED_init>
	
	LED_init(PORT_B, 0); //pedestrian's Green LED
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 4e 01 	call	0x29c	; 0x29c <LED_init>
	LED_init(PORT_B, 1); //pedestrian Yellow LED
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 4e 01 	call	0x29c	; 0x29c <LED_init>
	LED_init(PORT_B, 2); //pedestrian Red LED
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 4e 01 	call	0x29c	; 0x29c <LED_init>
	
	BUTTON_init(PORT_D, 2); //pedestrian button
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	0e 94 4a 01 	call	0x294	; 0x294 <BUTTON_init>
	interrupt_init();
  b4:	0e 94 de 02 	call	0x5bc	; 0x5bc <interrupt_init>
  b8:	08 95       	ret

000000ba <normal_mode>:
}

void  normal_mode(void)
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
	//Cars' LEDs will be changed every five seconds starting from Green then yellow then red then yellow then Green.
	state = 1;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	LED_on(PORT_A, 0); //cars' Green LED
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	81 e4       	ldi	r24, 0x41	; 65
  c8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LED_on>
	delay_5sec_t2();
  cc:	0e 94 07 03 	call	0x60e	; 0x60e <delay_5sec_t2>
	LED_off(PORT_A, 0);
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	81 e4       	ldi	r24, 0x41	; 65
  d4:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
		
	//Yellow LED will blink for five seconds before moving to Green or Red LEDs.
	uint16 overflowCounter = 0;
	timer_init_t2();
  d8:	0e 94 02 03 	call	0x604	; 0x604 <timer_init_t2>
	LED_on(PORT_A, 0); //cars' Green LED
	delay_5sec_t2();
	LED_off(PORT_A, 0);
		
	//Yellow LED will blink for five seconds before moving to Green or Red LEDs.
	uint16 overflowCounter = 0;
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
	timer_init_t2();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <normal_mode+0x3e>
	{
		while(READ_BIT(TIFR, 6) == 0)
		LED_toggle(PORT_A,1); //cars' Yellow LED
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	81 e4       	ldi	r24, 0x41	; 65
  e6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LED_toggle>
	//Yellow LED will blink for five seconds before moving to Green or Red LEDs.
	uint16 overflowCounter = 0;
	timer_init_t2();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
	{
		while(READ_BIT(TIFR, 6) == 0)
  ea:	08 b6       	in	r0, 0x38	; 56
  ec:	06 fe       	sbrs	r0, 6
  ee:	f9 cf       	rjmp	.-14     	; 0xe2 <normal_mode+0x28>
		LED_toggle(PORT_A,1); //cars' Yellow LED
		//clear the flag
		SET_BIT(TIFR, 6);
  f0:	88 b7       	in	r24, 0x38	; 56
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	88 bf       	out	0x38, r24	; 56
		overflowCounter++;
  f6:	21 96       	adiw	r28, 0x01	; 1
	LED_off(PORT_A, 0);
		
	//Yellow LED will blink for five seconds before moving to Green or Red LEDs.
	uint16 overflowCounter = 0;
	timer_init_t2();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
  f8:	c4 31       	cpi	r28, 0x14	; 20
  fa:	d1 05       	cpc	r29, r1
  fc:	b0 f3       	brcs	.-20     	; 0xea <normal_mode+0x30>
		LED_toggle(PORT_A,1); //cars' Yellow LED
		//clear the flag
		SET_BIT(TIFR, 6);
		overflowCounter++;
	}
	LED_off(PORT_A,1);
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	81 e4       	ldi	r24, 0x41	; 65
 102:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
	//Stop timer
	TCCR2 = 0x00;
 106:	15 bc       	out	0x25, r1	; 37
		
	state=0;
 108:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	LED_off(PORT_A, 0); //cars' Green LED
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	81 e4       	ldi	r24, 0x41	; 65
 110:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
	LED_on(PORT_A, 2); //cars' Red LED
 114:	62 e0       	ldi	r22, 0x02	; 2
 116:	81 e4       	ldi	r24, 0x41	; 65
 118:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LED_on>
	delay_5sec_t2();
 11c:	0e 94 07 03 	call	0x60e	; 0x60e <delay_5sec_t2>
	LED_off(PORT_A, 2);
 120:	62 e0       	ldi	r22, 0x02	; 2
 122:	81 e4       	ldi	r24, 0x41	; 65
 124:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
	
}
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <pedestrian_mode>:

void pedestrian_mode(void)
{
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
	switch(state)
 132:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 136:	88 23       	and	r24, r24
 138:	19 f0       	breq	.+6      	; 0x140 <pedestrian_mode+0x12>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	61 f0       	breq	.+24     	; 0x156 <pedestrian_mode+0x28>
 13e:	41 c0       	rjmp	.+130    	; 0x1c2 <pedestrian_mode+0x94>
	{
		//---------------------If pressed when the cars' Red LED is on,--------------
		case 0:
		//1. pedestrian's Green LED and the cars' Red LEDs will be on for five seconds
		LED_on(PORT_B, 0); //pedestrian's Green LED
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	82 e4       	ldi	r24, 0x42	; 66
 144:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LED_on>
		LED_on(PORT_A, 2); //cars' Red LED
 148:	62 e0       	ldi	r22, 0x02	; 2
 14a:	81 e4       	ldi	r24, 0x41	; 65
 14c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LED_on>
		delay_5sec();
 150:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <delay_5sec>
		
		break;
 154:	36 c0       	rjmp	.+108    	; 0x1c2 <pedestrian_mode+0x94>
		
		//---------------If pressed when the cars' Green LED is on or the cars' Yellow LED is blinking-----------------
		case 1:
		//1.the pedestrian Red LED will be on
		LED_on(PORT_B, 2); //pedestrian Red LED
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	82 e4       	ldi	r24, 0x42	; 66
 15a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LED_on>
		
		//2.both Yellow LEDs start to blink for five seconds
		uint16 overflowCounter = 0;
		timer_init();
 15e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <timer_init>
		case 1:
		//1.the pedestrian Red LED will be on
		LED_on(PORT_B, 2); //pedestrian Red LED
		
		//2.both Yellow LEDs start to blink for five seconds
		uint16 overflowCounter = 0;
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	d0 e0       	ldi	r29, 0x00	; 0
		timer_init();
		while(overflowCounter < NUMBUR_OF_OVERFLOWS)
 166:	0f c0       	rjmp	.+30     	; 0x186 <pedestrian_mode+0x58>
		{
			while(READ_BIT(TIFR, 0) == 0)
			{
				LED_toggle(PORT_A,1); //cars' Yellow LED
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	81 e4       	ldi	r24, 0x41	; 65
 16c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LED_toggle>
				LED_toggle(PORT_B, 1); //pedestrian Yellow LED
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	82 e4       	ldi	r24, 0x42	; 66
 174:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LED_toggle>
		//2.both Yellow LEDs start to blink for five seconds
		uint16 overflowCounter = 0;
		timer_init();
		while(overflowCounter < NUMBUR_OF_OVERFLOWS)
		{
			while(READ_BIT(TIFR, 0) == 0)
 178:	08 b6       	in	r0, 0x38	; 56
 17a:	00 fe       	sbrs	r0, 0
 17c:	f5 cf       	rjmp	.-22     	; 0x168 <pedestrian_mode+0x3a>
				LED_toggle(PORT_A,1); //cars' Yellow LED
				LED_toggle(PORT_B, 1); //pedestrian Yellow LED
			}
			
			//clear the flag
			SET_BIT(TIFR, 0);
 17e:	88 b7       	in	r24, 0x38	; 56
 180:	81 60       	ori	r24, 0x01	; 1
 182:	88 bf       	out	0x38, r24	; 56
			overflowCounter++;
 184:	21 96       	adiw	r28, 0x01	; 1
		LED_on(PORT_B, 2); //pedestrian Red LED
		
		//2.both Yellow LEDs start to blink for five seconds
		uint16 overflowCounter = 0;
		timer_init();
		while(overflowCounter < NUMBUR_OF_OVERFLOWS)
 186:	c4 31       	cpi	r28, 0x14	; 20
 188:	d1 05       	cpc	r29, r1
 18a:	b0 f3       	brcs	.-20     	; 0x178 <pedestrian_mode+0x4a>
			
			//clear the flag
			SET_BIT(TIFR, 0);
			overflowCounter++;
		}
		LED_off(PORT_A,1); //cars' Yellow LED
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	81 e4       	ldi	r24, 0x41	; 65
 190:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
		LED_off(PORT_B, 1); //pedestrian Yellow LED
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	82 e4       	ldi	r24, 0x42	; 66
 198:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
		//Stop timer
		TCCR0 = 0x00;
 19c:	13 be       	out	0x33, r1	; 51
		
		LED_off(PORT_B, 2); //pedestrian Red LED
 19e:	62 e0       	ldi	r22, 0x02	; 2
 1a0:	82 e4       	ldi	r24, 0x42	; 66
 1a2:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
		LED_off(PORT_A, 0); //cars' Green LED
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	81 e4       	ldi	r24, 0x41	; 65
 1aa:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
		
		//3. the cars' Red LED and pedestrian Green LEDs are on for five seconds
		LED_on(PORT_A, 2); //cars' Red LED
 1ae:	62 e0       	ldi	r22, 0x02	; 2
 1b0:	81 e4       	ldi	r24, 0x41	; 65
 1b2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LED_on>
		LED_on(PORT_B, 0); //pedestrian's Green LED
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	82 e4       	ldi	r24, 0x42	; 66
 1ba:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LED_on>
		delay_5sec();
 1be:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <delay_5sec>
	
	
	//------------------------ At the end of the two states ------------------------------------------
	
	//1. the cars' Red LED will be off
	LED_off(PORT_A, 2); //cars' Red LED
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	81 e4       	ldi	r24, 0x41	; 65
 1c6:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
	
	//2.both Yellow LEDs start blinking for 5 seconds and the pedestrian's Green LED is still on.
	uint16 overflowCounter = 0;
	timer_init();
 1ca:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <timer_init>
	
	//1. the cars' Red LED will be off
	LED_off(PORT_A, 2); //cars' Red LED
	
	//2.both Yellow LEDs start blinking for 5 seconds and the pedestrian's Green LED is still on.
	uint16 overflowCounter = 0;
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
 1d0:	d0 e0       	ldi	r29, 0x00	; 0
	timer_init();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
 1d2:	0f c0       	rjmp	.+30     	; 0x1f2 <pedestrian_mode+0xc4>
	{
		while(READ_BIT(TIFR, 0) == 0)
		{
			LED_toggle(PORT_A,1); //cars' Yellow LED
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	81 e4       	ldi	r24, 0x41	; 65
 1d8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LED_toggle>
			LED_toggle(PORT_B, 1); //pedestrian Yellow LED
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	82 e4       	ldi	r24, 0x42	; 66
 1e0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LED_toggle>
	//2.both Yellow LEDs start blinking for 5 seconds and the pedestrian's Green LED is still on.
	uint16 overflowCounter = 0;
	timer_init();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
	{
		while(READ_BIT(TIFR, 0) == 0)
 1e4:	08 b6       	in	r0, 0x38	; 56
 1e6:	00 fe       	sbrs	r0, 0
 1e8:	f5 cf       	rjmp	.-22     	; 0x1d4 <pedestrian_mode+0xa6>
			LED_toggle(PORT_A,1); //cars' Yellow LED
			LED_toggle(PORT_B, 1); //pedestrian Yellow LED
		}
		
		//clear the flag
		SET_BIT(TIFR, 0);
 1ea:	88 b7       	in	r24, 0x38	; 56
 1ec:	81 60       	ori	r24, 0x01	; 1
 1ee:	88 bf       	out	0x38, r24	; 56
		overflowCounter++;
 1f0:	21 96       	adiw	r28, 0x01	; 1
	LED_off(PORT_A, 2); //cars' Red LED
	
	//2.both Yellow LEDs start blinking for 5 seconds and the pedestrian's Green LED is still on.
	uint16 overflowCounter = 0;
	timer_init();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
 1f2:	c4 31       	cpi	r28, 0x14	; 20
 1f4:	d1 05       	cpc	r29, r1
 1f6:	b0 f3       	brcs	.-20     	; 0x1e4 <pedestrian_mode+0xb6>
		
		//clear the flag
		SET_BIT(TIFR, 0);
		overflowCounter++;
	}
	LED_off(PORT_A,1); //cars' Yellow LED
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	81 e4       	ldi	r24, 0x41	; 65
 1fc:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
	LED_off(PORT_B, 1); //pedestrian Yellow LED
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	82 e4       	ldi	r24, 0x42	; 66
 204:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
	//Stop timer
	TCCR0 = 0x00;
 208:	13 be       	out	0x33, r1	; 51
	
	//3.After the five seconds the pedestrian Green LED will be off
	LED_off(PORT_B, 0); //pedestrian's Green LED
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	82 e4       	ldi	r24, 0x42	; 66
 20e:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
	
	//4.both the pedestrian Red LED and the cars' Green LED will be on.
	LED_on(PORT_B, 2); //pedestrian Red LED
 212:	62 e0       	ldi	r22, 0x02	; 2
 214:	82 e4       	ldi	r24, 0x42	; 66
 216:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LED_on>
	LED_on(PORT_A, 0); //cars' Green LED
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	81 e4       	ldi	r24, 0x41	; 65
 21e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LED_on>
	
	//5. Traffic lights signals are going to the normal mode again.
	delay_5sec();
 222:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <delay_5sec>
	LED_off(PORT_B, 2); //pedestrian Red LED
 226:	62 e0       	ldi	r22, 0x02	; 2
 228:	82 e4       	ldi	r24, 0x42	; 66
 22a:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
	if(state == 0) //pressed when the cars' Red LED is on
 22e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 232:	81 11       	cpse	r24, r1
 234:	08 c0       	rjmp	.+16     	; 0x246 <pedestrian_mode+0x118>
	{
		LED_off(PORT_A, 0); //cars' Green LED
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	81 e4       	ldi	r24, 0x41	; 65
 23a:	0e 94 56 01 	call	0x2ac	; 0x2ac <LED_off>
		LED_on(PORT_A, 2); //cars' Red LED
 23e:	62 e0       	ldi	r22, 0x02	; 2
 240:	81 e4       	ldi	r24, 0x41	; 65
 242:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LED_on>
	}
}
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <__vector_1>:

ISR(EXT_INT0)
{
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	
	pedestrian_mode();
 26e:	0e 94 97 00 	call	0x12e	; 0x12e <pedestrian_mode>
	
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <BUTTON_init>:
//global variables

//functions definitions
void BUTTON_init(uint8 buttonPort, uint8 buttonPin)
{
	DIO_init(buttonPort, buttonPin, IN);
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	0e 94 62 01 	call	0x2c4	; 0x2c4 <DIO_init>
 29a:	08 95       	ret

0000029c <LED_init>:
//global variables

//functions definitions
void LED_init(uint8 ledPort, uint8 ledPin)
{
	DIO_init(ledPort, ledPin, OUT);
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <DIO_init>
 2a2:	08 95       	ret

000002a4 <LED_on>:
}

void LED_on(uint8 ledPort, uint8 ledPin)
{
	DIO_write(ledPort,ledPin, HIGH);
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
 2aa:	08 95       	ret

000002ac <LED_off>:
}

void LED_off(uint8 ledPort, uint8 ledPin)
{
	DIO_write(ledPort,ledPin, LOW);
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
 2b2:	08 95       	ret

000002b4 <LED_toggle>:
}

void LED_toggle(uint8 ledPort, uint8 ledPin)
{
	DIO_toggle(ledPort,ledPin);
 2b4:	0e 94 ba 02 	call	0x574	; 0x574 <DIO_toggle>
 2b8:	08 95       	ret

000002ba <main>:

#include "Application/App.h"

int main(void)
{
	App_init();
 2ba:	0e 94 3e 00 	call	0x7c	; 0x7c <App_init>
	
	while (1) 
	{
		normal_mode();
 2be:	0e 94 5d 00 	call	0xba	; 0xba <normal_mode>
 2c2:	fd cf       	rjmp	.-6      	; 0x2be <main+0x4>

000002c4 <DIO_init>:
//global variables

//functions definitions
void DIO_init(uint8 portNumber, uint8 pinNumber, uint8 direction)
{
	switch(portNumber)
 2c4:	82 34       	cpi	r24, 0x42	; 66
 2c6:	31 f1       	breq	.+76     	; 0x314 <DIO_init+0x50>
 2c8:	18 f4       	brcc	.+6      	; 0x2d0 <DIO_init+0xc>
 2ca:	81 34       	cpi	r24, 0x41	; 65
 2cc:	39 f0       	breq	.+14     	; 0x2dc <DIO_init+0x18>
 2ce:	08 95       	ret
 2d0:	83 34       	cpi	r24, 0x43	; 67
 2d2:	e1 f1       	breq	.+120    	; 0x34c <DIO_init+0x88>
 2d4:	84 34       	cpi	r24, 0x44	; 68
 2d6:	09 f4       	brne	.+2      	; 0x2da <DIO_init+0x16>
 2d8:	54 c0       	rjmp	.+168    	; 0x382 <DIO_init+0xbe>
 2da:	08 95       	ret
	{
		case PORT_A:
			if (direction == IN)
 2dc:	41 11       	cpse	r20, r1
 2de:	0c c0       	rjmp	.+24     	; 0x2f8 <DIO_init+0x34>
			{
				CLR_BIT(DDRA, pinNumber);
 2e0:	2a b3       	in	r18, 0x1a	; 26
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_init+0x28>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_init+0x24>
 2f0:	80 95       	com	r24
 2f2:	82 23       	and	r24, r18
 2f4:	8a bb       	out	0x1a, r24	; 26
 2f6:	08 95       	ret
			}
			else if (direction == OUT)
 2f8:	41 30       	cpi	r20, 0x01	; 1
 2fa:	09 f0       	breq	.+2      	; 0x2fe <DIO_init+0x3a>
 2fc:	5c c0       	rjmp	.+184    	; 0x3b6 <DIO_init+0xf2>
			{
				SET_BIT(DDRA, pinNumber);
 2fe:	2a b3       	in	r18, 0x1a	; 26
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_init+0x46>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_init+0x42>
 30e:	82 2b       	or	r24, r18
 310:	8a bb       	out	0x1a, r24	; 26
 312:	08 95       	ret
				//Error handling
			}
		break;
		
		case PORT_B:
			if (direction == IN)
 314:	41 11       	cpse	r20, r1
 316:	0c c0       	rjmp	.+24     	; 0x330 <DIO_init+0x6c>
			{
				CLR_BIT(DDRB, pinNumber);
 318:	27 b3       	in	r18, 0x17	; 23
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_init+0x60>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_init+0x5c>
 328:	80 95       	com	r24
 32a:	82 23       	and	r24, r18
 32c:	87 bb       	out	0x17, r24	; 23
 32e:	08 95       	ret
			}
			else if (direction == OUT)
 330:	41 30       	cpi	r20, 0x01	; 1
 332:	09 f0       	breq	.+2      	; 0x336 <DIO_init+0x72>
 334:	40 c0       	rjmp	.+128    	; 0x3b6 <DIO_init+0xf2>
			{
				SET_BIT(DDRB, pinNumber);
 336:	27 b3       	in	r18, 0x17	; 23
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_init+0x7e>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	6a 95       	dec	r22
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_init+0x7a>
 346:	82 2b       	or	r24, r18
 348:	87 bb       	out	0x17, r24	; 23
 34a:	08 95       	ret
				//Error handling
			}
		break;
		
		case PORT_C:
		if (direction == IN)
 34c:	41 11       	cpse	r20, r1
 34e:	0c c0       	rjmp	.+24     	; 0x368 <DIO_init+0xa4>
		{
			CLR_BIT(DDRC, pinNumber);
 350:	24 b3       	in	r18, 0x14	; 20
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_init+0x98>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_init+0x94>
 360:	80 95       	com	r24
 362:	82 23       	and	r24, r18
 364:	84 bb       	out	0x14, r24	; 20
 366:	08 95       	ret
		}
		else if (direction == OUT)
 368:	41 30       	cpi	r20, 0x01	; 1
 36a:	29 f5       	brne	.+74     	; 0x3b6 <DIO_init+0xf2>
		{
			SET_BIT(DDRC, pinNumber);
 36c:	24 b3       	in	r18, 0x14	; 20
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_init+0xb4>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	6a 95       	dec	r22
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_init+0xb0>
 37c:	82 2b       	or	r24, r18
 37e:	84 bb       	out	0x14, r24	; 20
 380:	08 95       	ret
			//Error handling
		}
		break;
		
		case PORT_D:
		if (direction == IN)
 382:	41 11       	cpse	r20, r1
 384:	0c c0       	rjmp	.+24     	; 0x39e <DIO_init+0xda>
		{
			CLR_BIT(DDRD, pinNumber);
 386:	21 b3       	in	r18, 0x11	; 17
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_init+0xce>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_init+0xca>
 396:	80 95       	com	r24
 398:	82 23       	and	r24, r18
 39a:	81 bb       	out	0x11, r24	; 17
 39c:	08 95       	ret
		}
		else if (direction == OUT)
 39e:	41 30       	cpi	r20, 0x01	; 1
 3a0:	51 f4       	brne	.+20     	; 0x3b6 <DIO_init+0xf2>
		{
			SET_BIT(DDRD, pinNumber);
 3a2:	21 b3       	in	r18, 0x11	; 17
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_init+0xea>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_init+0xe6>
 3b2:	82 2b       	or	r24, r18
 3b4:	81 bb       	out	0x11, r24	; 17
 3b6:	08 95       	ret

000003b8 <DIO_write>:
	}
}

void DIO_write(uint8 portNumber, uint8 pinNumber, uint8 value)
{
	switch(portNumber)
 3b8:	82 34       	cpi	r24, 0x42	; 66
 3ba:	31 f1       	breq	.+76     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3bc:	18 f4       	brcc	.+6      	; 0x3c4 <DIO_write+0xc>
 3be:	81 34       	cpi	r24, 0x41	; 65
 3c0:	39 f0       	breq	.+14     	; 0x3d0 <DIO_write+0x18>
 3c2:	08 95       	ret
 3c4:	83 34       	cpi	r24, 0x43	; 67
 3c6:	e1 f1       	breq	.+120    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 3c8:	84 34       	cpi	r24, 0x44	; 68
 3ca:	09 f4       	brne	.+2      	; 0x3ce <DIO_write+0x16>
 3cc:	54 c0       	rjmp	.+168    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 3ce:	08 95       	ret
	{
		case PORT_A:
		if (value == LOW)
 3d0:	41 11       	cpse	r20, r1
 3d2:	0c c0       	rjmp	.+24     	; 0x3ec <DIO_write+0x34>
		{
			CLR_BIT(PORTA, pinNumber);
 3d4:	2b b3       	in	r18, 0x1b	; 27
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_write+0x28>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_write+0x24>
 3e4:	80 95       	com	r24
 3e6:	82 23       	and	r24, r18
 3e8:	8b bb       	out	0x1b, r24	; 27
 3ea:	08 95       	ret
		}
		else if (value == HIGH)
 3ec:	41 30       	cpi	r20, 0x01	; 1
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <DIO_write+0x3a>
 3f0:	5c c0       	rjmp	.+184    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
		{
			SET_BIT(PORTA, pinNumber);
 3f2:	2b b3       	in	r18, 0x1b	; 27
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_write+0x46>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_write+0x42>
 402:	82 2b       	or	r24, r18
 404:	8b bb       	out	0x1b, r24	; 27
 406:	08 95       	ret
			//Error handling
		}
		break;
		
		case PORT_B:
		if (value == LOW)
 408:	41 11       	cpse	r20, r1
 40a:	0c c0       	rjmp	.+24     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
		{
			CLR_BIT(PORTB, pinNumber);
 40c:	28 b3       	in	r18, 0x18	; 24
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	80 95       	com	r24
 41e:	82 23       	and	r24, r18
 420:	88 bb       	out	0x18, r24	; 24
 422:	08 95       	ret
		}
		else if (value == HIGH)
 424:	41 30       	cpi	r20, 0x01	; 1
 426:	09 f0       	breq	.+2      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 428:	40 c0       	rjmp	.+128    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
		{
			SET_BIT(PORTB, pinNumber);
 42a:	28 b3       	in	r18, 0x18	; 24
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	02 c0       	rjmp	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 43a:	82 2b       	or	r24, r18
 43c:	88 bb       	out	0x18, r24	; 24
 43e:	08 95       	ret
			//Error handling
		}
		break;
		
		case PORT_C:
		if (value == LOW)
 440:	41 11       	cpse	r20, r1
 442:	0c c0       	rjmp	.+24     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		{
			CLR_BIT(PORTC, pinNumber);
 444:	25 b3       	in	r18, 0x15	; 21
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	6a 95       	dec	r22
 452:	e2 f7       	brpl	.-8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 454:	80 95       	com	r24
 456:	82 23       	and	r24, r18
 458:	85 bb       	out	0x15, r24	; 21
 45a:	08 95       	ret
		}
		else if (value == HIGH)
 45c:	41 30       	cpi	r20, 0x01	; 1
 45e:	29 f5       	brne	.+74     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
		{
			SET_BIT(PORTC, pinNumber);
 460:	25 b3       	in	r18, 0x15	; 21
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	6a 95       	dec	r22
 46e:	e2 f7       	brpl	.-8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 470:	82 2b       	or	r24, r18
 472:	85 bb       	out	0x15, r24	; 21
 474:	08 95       	ret
			//Error handling
		}
		break;
		
		case PORT_D:
		if (value == LOW)
 476:	41 11       	cpse	r20, r1
 478:	0c c0       	rjmp	.+24     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
		{
			CLR_BIT(PORTD, pinNumber);
 47a:	22 b3       	in	r18, 0x12	; 18
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 48a:	80 95       	com	r24
 48c:	82 23       	and	r24, r18
 48e:	82 bb       	out	0x12, r24	; 18
 490:	08 95       	ret
		}
		else if (value == HIGH)
 492:	41 30       	cpi	r20, 0x01	; 1
 494:	51 f4       	brne	.+20     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
		{
			SET_BIT(PORTD, pinNumber);
 496:	22 b3       	in	r18, 0x12	; 18
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 4a6:	82 2b       	or	r24, r18
 4a8:	82 bb       	out	0x12, r24	; 18
 4aa:	08 95       	ret

000004ac <DIO_read>:
	}
}

void DIO_read(uint8 portNumber, uint8 pinNumber, uint8 *value)
{
	switch(portNumber)
 4ac:	82 34       	cpi	r24, 0x42	; 66
 4ae:	01 f1       	breq	.+64     	; 0x4f0 <DIO_read+0x44>
 4b0:	18 f4       	brcc	.+6      	; 0x4b8 <DIO_read+0xc>
 4b2:	81 34       	cpi	r24, 0x41	; 65
 4b4:	39 f0       	breq	.+14     	; 0x4c4 <DIO_read+0x18>
 4b6:	08 95       	ret
 4b8:	83 34       	cpi	r24, 0x43	; 67
 4ba:	81 f1       	breq	.+96     	; 0x51c <DIO_read+0x70>
 4bc:	84 34       	cpi	r24, 0x44	; 68
 4be:	09 f4       	brne	.+2      	; 0x4c2 <DIO_read+0x16>
 4c0:	43 c0       	rjmp	.+134    	; 0x548 <DIO_read+0x9c>
 4c2:	08 95       	ret
	{
		case PORT_A:
		*value = READ_BIT(PINA, pinNumber);
 4c4:	79 b3       	in	r23, 0x19	; 25
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	9c 01       	movw	r18, r24
 4cc:	06 2e       	mov	r0, r22
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <DIO_read+0x28>
 4d0:	22 0f       	add	r18, r18
 4d2:	33 1f       	adc	r19, r19
 4d4:	0a 94       	dec	r0
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <DIO_read+0x24>
 4d8:	87 2f       	mov	r24, r23
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	82 23       	and	r24, r18
 4de:	93 23       	and	r25, r19
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_read+0x3a>
 4e2:	95 95       	asr	r25
 4e4:	87 95       	ror	r24
 4e6:	6a 95       	dec	r22
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_read+0x36>
 4ea:	fa 01       	movw	r30, r20
 4ec:	80 83       	st	Z, r24
		break;
 4ee:	08 95       	ret
		
		case PORT_B:
		*value = READ_BIT(PINB, pinNumber);
 4f0:	76 b3       	in	r23, 0x16	; 22
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	9c 01       	movw	r18, r24
 4f8:	06 2e       	mov	r0, r22
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_read+0x54>
 4fc:	22 0f       	add	r18, r18
 4fe:	33 1f       	adc	r19, r19
 500:	0a 94       	dec	r0
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_read+0x50>
 504:	87 2f       	mov	r24, r23
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	82 23       	and	r24, r18
 50a:	93 23       	and	r25, r19
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_read+0x66>
 50e:	95 95       	asr	r25
 510:	87 95       	ror	r24
 512:	6a 95       	dec	r22
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_read+0x62>
 516:	fa 01       	movw	r30, r20
 518:	80 83       	st	Z, r24
		break;
 51a:	08 95       	ret
		
		case PORT_C:
		*value = READ_BIT(PINC, pinNumber);
 51c:	73 b3       	in	r23, 0x13	; 19
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	9c 01       	movw	r18, r24
 524:	06 2e       	mov	r0, r22
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_read+0x80>
 528:	22 0f       	add	r18, r18
 52a:	33 1f       	adc	r19, r19
 52c:	0a 94       	dec	r0
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_read+0x7c>
 530:	87 2f       	mov	r24, r23
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	82 23       	and	r24, r18
 536:	93 23       	and	r25, r19
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_read+0x92>
 53a:	95 95       	asr	r25
 53c:	87 95       	ror	r24
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_read+0x8e>
 542:	fa 01       	movw	r30, r20
 544:	80 83       	st	Z, r24
		break;
 546:	08 95       	ret
		
		case PORT_D:
		*value = READ_BIT(PIND, pinNumber);
 548:	70 b3       	in	r23, 0x10	; 16
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	9c 01       	movw	r18, r24
 550:	06 2e       	mov	r0, r22
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_read+0xac>
 554:	22 0f       	add	r18, r18
 556:	33 1f       	adc	r19, r19
 558:	0a 94       	dec	r0
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_read+0xa8>
 55c:	87 2f       	mov	r24, r23
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	82 23       	and	r24, r18
 562:	93 23       	and	r25, r19
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_read+0xbe>
 566:	95 95       	asr	r25
 568:	87 95       	ror	r24
 56a:	6a 95       	dec	r22
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_read+0xba>
 56e:	fa 01       	movw	r30, r20
 570:	80 83       	st	Z, r24
 572:	08 95       	ret

00000574 <DIO_toggle>:
		break;
	}
}

void DIO_toggle(uint8 portNumber, uint8 pinNumber)
{
 574:	0f 93       	push	r16
 576:	1f 93       	push	r17
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	1f 92       	push	r1
 57e:	cd b7       	in	r28, 0x3d	; 61
 580:	de b7       	in	r29, 0x3e	; 62
 582:	18 2f       	mov	r17, r24
 584:	06 2f       	mov	r16, r22
	uint8 value;
	
	DIO_read(portNumber, pinNumber, &value);
 586:	ae 01       	movw	r20, r28
 588:	4f 5f       	subi	r20, 0xFF	; 255
 58a:	5f 4f       	sbci	r21, 0xFF	; 255
 58c:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_read>
	if (value == LOW)
 590:	89 81       	ldd	r24, Y+1	; 0x01
 592:	81 11       	cpse	r24, r1
 594:	06 c0       	rjmp	.+12     	; 0x5a2 <DIO_toggle+0x2e>
	{
		DIO_write(portNumber, pinNumber, HIGH);
 596:	41 e0       	ldi	r20, 0x01	; 1
 598:	60 2f       	mov	r22, r16
 59a:	81 2f       	mov	r24, r17
 59c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
 5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <DIO_toggle+0x3c>
	}
	else if (value == HIGH)
 5a2:	81 30       	cpi	r24, 0x01	; 1
 5a4:	29 f4       	brne	.+10     	; 0x5b0 <DIO_toggle+0x3c>
	{
		DIO_write(portNumber, pinNumber, LOW);
 5a6:	40 e0       	ldi	r20, 0x00	; 0
 5a8:	60 2f       	mov	r22, r16
 5aa:	81 2f       	mov	r24, r17
 5ac:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
	}
	else
	{
		//Error handling
	}
}
 5b0:	0f 90       	pop	r0
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	1f 91       	pop	r17
 5b8:	0f 91       	pop	r16
 5ba:	08 95       	ret

000005bc <interrupt_init>:
#include "Interrupt.h"

void interrupt_init(void)
{
	//Enable global interrupt
	SET_BIT(SREG, 7);
 5bc:	8f b7       	in	r24, 0x3f	; 63
 5be:	80 68       	ori	r24, 0x80	; 128
 5c0:	8f bf       	out	0x3f, r24	; 63
	
	//Choose the external interrupt sense
	SET_BIT(MCUCR,0);
 5c2:	85 b7       	in	r24, 0x35	; 53
 5c4:	81 60       	ori	r24, 0x01	; 1
 5c6:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,1);	//The rising edge of INT0 generates an interrupt request
 5c8:	85 b7       	in	r24, 0x35	; 53
 5ca:	82 60       	ori	r24, 0x02	; 2
 5cc:	85 bf       	out	0x35, r24	; 53
	
	//Enable INT0
	SET_BIT(GICR, 6);
 5ce:	8b b7       	in	r24, 0x3b	; 59
 5d0:	80 64       	ori	r24, 0x40	; 64
 5d2:	8b bf       	out	0x3b, r24	; 59
 5d4:	08 95       	ret

000005d6 <timer_init>:
#include "timer.h"

void timer_init(void)
{
	//Timer initial value
	TCNT0 = 12;
 5d6:	8c e0       	ldi	r24, 0x0C	; 12
 5d8:	82 bf       	out	0x32, r24	; 50
	//Timer mode
	TCCR0 = 0x05; //Normal mode & clk/1024 (From prescaler)
 5da:	85 e0       	ldi	r24, 0x05	; 5
 5dc:	83 bf       	out	0x33, r24	; 51
 5de:	08 95       	ret

000005e0 <delay_5sec>:

void delay_5sec(void)
{
	uint16 overflowCounter = 0;
	
	timer_init();
 5e0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <timer_init>
	TCCR0 = 0x05; //Normal mode & clk/1024 (From prescaler)
}

void delay_5sec(void)
{
	uint16 overflowCounter = 0;
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	30 e0       	ldi	r19, 0x00	; 0
	
	timer_init();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
 5e8:	08 c0       	rjmp	.+16     	; 0x5fa <delay_5sec+0x1a>
	{
		while(READ_BIT(TIFR, 0) == 0);
 5ea:	08 b6       	in	r0, 0x38	; 56
 5ec:	00 fe       	sbrs	r0, 0
 5ee:	fd cf       	rjmp	.-6      	; 0x5ea <delay_5sec+0xa>
		
		//clear the flag
		SET_BIT(TIFR, 0);
 5f0:	88 b7       	in	r24, 0x38	; 56
 5f2:	81 60       	ori	r24, 0x01	; 1
 5f4:	88 bf       	out	0x38, r24	; 56
		overflowCounter++;
 5f6:	2f 5f       	subi	r18, 0xFF	; 255
 5f8:	3f 4f       	sbci	r19, 0xFF	; 255
void delay_5sec(void)
{
	uint16 overflowCounter = 0;
	
	timer_init();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
 5fa:	24 31       	cpi	r18, 0x14	; 20
 5fc:	31 05       	cpc	r19, r1
 5fe:	a8 f3       	brcs	.-22     	; 0x5ea <delay_5sec+0xa>
		SET_BIT(TIFR, 0);
		overflowCounter++;
	}
	
	//Stop timer
	TCCR0 = 0x00;
 600:	13 be       	out	0x33, r1	; 51
 602:	08 95       	ret

00000604 <timer_init_t2>:
}

void timer_init_t2(void)
{
	//Timer initial value
	TCNT2 = 12;
 604:	8c e0       	ldi	r24, 0x0C	; 12
 606:	84 bd       	out	0x24, r24	; 36
	//Timer mode
	TCCR2 = 0x07; //Normal mode & clk/1024 (From prescaler)
 608:	87 e0       	ldi	r24, 0x07	; 7
 60a:	85 bd       	out	0x25, r24	; 37
 60c:	08 95       	ret

0000060e <delay_5sec_t2>:

void delay_5sec_t2(void)
{
	uint16 overflowCounter = 0;
	
	timer_init_t2();
 60e:	0e 94 02 03 	call	0x604	; 0x604 <timer_init_t2>
	TCCR2 = 0x07; //Normal mode & clk/1024 (From prescaler)
}

void delay_5sec_t2(void)
{
	uint16 overflowCounter = 0;
 612:	20 e0       	ldi	r18, 0x00	; 0
 614:	30 e0       	ldi	r19, 0x00	; 0
	
	timer_init_t2();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
 616:	08 c0       	rjmp	.+16     	; 0x628 <delay_5sec_t2+0x1a>
	{
		while(READ_BIT(TIFR, 6) == 0);
 618:	08 b6       	in	r0, 0x38	; 56
 61a:	06 fe       	sbrs	r0, 6
 61c:	fd cf       	rjmp	.-6      	; 0x618 <delay_5sec_t2+0xa>
		
		//clear the flag
		SET_BIT(TIFR, 6);
 61e:	88 b7       	in	r24, 0x38	; 56
 620:	80 64       	ori	r24, 0x40	; 64
 622:	88 bf       	out	0x38, r24	; 56
		overflowCounter++;
 624:	2f 5f       	subi	r18, 0xFF	; 255
 626:	3f 4f       	sbci	r19, 0xFF	; 255
void delay_5sec_t2(void)
{
	uint16 overflowCounter = 0;
	
	timer_init_t2();
	while(overflowCounter < NUMBUR_OF_OVERFLOWS)
 628:	24 31       	cpi	r18, 0x14	; 20
 62a:	31 05       	cpc	r19, r1
 62c:	a8 f3       	brcs	.-22     	; 0x618 <delay_5sec_t2+0xa>
		SET_BIT(TIFR, 6);
		overflowCounter++;
	}
	
	//Stop timer
	TCCR2 = 0x00;
 62e:	15 bc       	out	0x25, r1	; 37
 630:	08 95       	ret

00000632 <_exit>:
 632:	f8 94       	cli

00000634 <__stop_program>:
 634:	ff cf       	rjmp	.-2      	; 0x634 <__stop_program>
